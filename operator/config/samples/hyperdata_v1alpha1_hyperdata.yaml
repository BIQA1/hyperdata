apiVersion: hyperdata.tmax.io/v1alpha1
kind: Hyperdata
metadata:
  name: hyperdata-sample
spec:
  # Default values copied from <project_dir>/helm-charts/hyperdata-stack/values.yaml
  global:
    db:
      address: tiberolocaldns
      mountPath: /db
      persistentVolumeClaimName: tibero-pvc-db
      port: 8629
    loadbalancer:
      enabled: true
      ip: 192.168.179.39
      isHttps: true
      port: 8080
    namespace: hyperdata
    registry:
      address: 192.168.179.44:5000
      imagePullSecret: ""
  hyperdata:
    enabled: true
    global:
      db:
        address: tiberolocaldns
        mountPath: /db
        persistentVolumeClaimName: tibero-pvc-db
        port: 8629
      loadbalancer:
        enabled: true
        ip: 192.168.179.39
        isHttps: true
        port: 8080
      namespace: hyperdata
      registry:
        address: 192.168.179.44:5000
        imagePullSecret: ""
    image:
      name: hyperdata20.4_hd
      tag: 20210820182035
    kca:
      address: svc-kca
      port: 5000
    proxy:
      bodysize: 1024m
      timeout: 1800
    resources:
      cpu: 2
      memory: 4Gi
    version:
      major: 20
  mlplatform:
    automl:
      image:
        name: hyperdata20.4_mlplatform_automl
        tag: 20210827_v1
    backend:
      image:
        name: hyperdata20.4_mlplatform_backend
        tag: 20210820_v1
      resources:
        limits:
          cpu: 1
          memory: 1G
        requests:
          cpu: 1
          memory: 1G
      volume:
        mountPath: /mlplatform
        size: 10Gi
        storageClass: ceph-filesystem
    frontend:
      image:
        name: hyperdata20.4_mlplatform_frontend
        tag: 20210820_v1
      resources:
        limits:
          cpu: 1
          memory: 1G
        requests:
          cpu: 1
          memory: 1G
      service:
        nodePort: ""
        type: ClusterIP
    global:
      db:
        address: tiberolocaldns
        mountPath: /db
        persistentVolumeClaimName: tibero-pvc-db
        port: 8629
      loadbalancer:
        enabled: true
        ip: 192.168.179.39
        isHttps: true
        port: 8080
      namespace: hyperdata
      registry:
        address: 192.168.179.44:5000
        imagePullSecret: ""
    hyperdata:
      address: http://hyperdata-svc-hd:8080
    kubernetes:
      istio:
        ingressgateway:
          ip: 192.168.179.31
          namespace: istio-system
          port: 31380
          service:
            name: istio-ingressgateway
    models:
      recommendation:
        image:
          name: hyperdata20.4_mlplatform_recommendation
          tag: 20210827_v1
    proauth:
      address: http://hyperdata-lb-hd:28080
  nginx:
    controller:
      addHeaders: {}
      admissionWebhooks:
        annotations: {}
        certificate: /usr/local/certificates/cert
        createSecretJob:
          resources: {}
        enabled: true
        existingPsp: ""
        failurePolicy: Fail
        key: /usr/local/certificates/key
        namespaceSelector: {}
        objectSelector: {}
        patch:
          enabled: true
          image:
            digest: sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
            image: ingress-nginx/kube-webhook-certgen
            pullPolicy: IfNotPresent
            registry: k8s.gcr.io
            tag: v1.0
          nodeSelector:
            kubernetes.io/os: linux
          podAnnotations: {}
          priorityClassName: ""
          runAsUser: 2000
          tolerations: []
        patchWebhookJob:
          resources: {}
        port: 8443
        service:
          annotations: {}
          externalIPs: []
          loadBalancerSourceRanges: []
          servicePort: 443
          type: ClusterIP
      affinity: {}
      annotations: {}
      autoscaling:
        behavior: {}
        enabled: false
        maxReplicas: 11
        minReplicas: 1
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      autoscalingTemplate: []
      config:
        use-http2: false
      configAnnotations: {}
      configMapNamespace: ""
      containerName: controller
      containerPort:
        http: 80
        https: 443
      customTemplate:
        configMapKey: ""
        configMapName: ""
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      electionID: ingress-controller-leader
      enableMimalloc: true
      existingPsp: ""
      extraArgs: {}
      extraContainers: []
      extraEnvs: []
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      healthCheckPath: /healthz
      hostNetwork: false
      hostPort:
        enabled: false
        ports:
          http: 80
          https: 443
      hostname: {}
      image:
        allowPrivilegeEscalation: true
        digest: ""
        image: ingress-nginx/controller
        pullPolicy: IfNotPresent
        registry: 192.168.179.44:5000
        runAsUser: 101
        tag: v1.0.0
      ingressClassResource:
        controllerValue: k8s.io/ingress-nginx
        default: false
        enabled: true
        name: hyperdata-nginx
        parameters: {}
      keda:
        apiVersion: keda.sh/v1alpha1
        behavior: {}
        cooldownPeriod: 300
        enabled: false
        maxReplicas: 11
        minReplicas: 1
        pollingInterval: 30
        restoreToOriginalReplicaCount: false
        scaledObject:
          annotations: {}
        triggers: []
      kind: Deployment
      labels: {}
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      maxmindLicenseKey: ""
      metrics:
        enabled: false
        port: 10254
        prometheusRule:
          additionalLabels: {}
          enabled: false
          rules: []
        service:
          annotations: {}
          externalIPs: []
          loadBalancerSourceRanges: []
          servicePort: 10254
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
          metricRelabelings: []
          namespace: ""
          namespaceSelector: {}
          scrapeInterval: 30s
          targetLabels: []
      minAvailable: 1
      minReadySeconds: 0
      name: controller
      nodeSelector:
        kubernetes.io/os: linux
      podAnnotations: {}
      podLabels: {}
      podSecurityContext: {}
      priorityClassName: ""
      proxySetHeaders: {}
      publishService:
        enabled: true
        pathOverride: ""
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      replicaCount: 1
      reportNodeInternalIp: false
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      scope:
        enabled: true
        namespace: hyperdata
      service:
        annotations:
          metallb.universe.tf/allow-shared-ip: top
        enableHttp: true
        enableHttps: true
        enabled: true
        externalIPs: []
        externalTrafficPolicy: Cluster
        internal:
          annotations: {}
          enabled: false
          loadBalancerSourceRanges: []
        labels: {}
        loadBalancerIP: 192.168.179.39
        loadBalancerSourceRanges: []
        nodePorts:
          http: ""
          https: ""
          tcp: {}
          udp: {}
        ports:
          http: 80
          https: 8080
        sessionAffinity: None
        targetPorts:
          http: http
          https: https
        type: loadBalancer
      sysctls: {}
      tcp:
        annotations: {}
        configMapNamespace: ""
      terminationGracePeriodSeconds: 300
      tolerations: []
      topologySpreadConstraints: []
      udp:
        annotations: {}
        configMapNamespace: ""
      updateStrategy: {}
      watchIngressWithoutClass: false
    defaultBackend:
      affinity: {}
      autoscaling:
        annotations: {}
        enabled: false
        maxReplicas: 2
        minReplicas: 1
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      enabled: false
      existingPsp: ""
      extraArgs: {}
      extraEnvs: []
      extraVolumeMounts: []
      extraVolumes: []
      image:
        allowPrivilegeEscalation: false
        image: defaultbackend-amd64
        pullPolicy: IfNotPresent
        readOnlyRootFilesystem: true
        registry: k8s.gcr.io
        runAsNonRoot: true
        runAsUser: 65534
        tag: "1.5"
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      minAvailable: 1
      name: defaultbackend
      nodeSelector:
        kubernetes.io/os: linux
      podAnnotations: {}
      podLabels: {}
      podSecurityContext: {}
      port: 8080
      priorityClassName: ""
      readinessProbe:
        failureThreshold: 6
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      serviceAccount:
        automountServiceAccountToken: true
        create: true
        name: ""
      tolerations: []
    dhParam: null
    enabled: true
    fullnameOverride: hyperdata
    global:
      db:
        address: tiberolocaldns
        mountPath: /db
        persistentVolumeClaimName: tibero-pvc-db
        port: 8629
      loadbalancer:
        enabled: true
        ip: 192.168.179.39
        isHttps: true
        port: 8080
      namespace: hyperdata
      registry:
        address: 192.168.179.44:5000
        imagePullSecret: ""
    imagePullSecrets: ""
    podSecurityPolicy:
      enabled: false
    rbac:
      create: true
      scope: false
    revisionHistoryLimit: 10
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: ""
    tcp: {}
    udp: {}
  tibero:
    enabled: true
    global:
      db:
        address: tiberolocaldns
        mountPath: /db
        persistentVolumeClaimName: tibero-pvc-db
        port: 8629
      loadbalancer:
        enabled: true
        ip: 192.168.179.39
        isHttps: true
        port: 8080
      namespace: hyperdata
      registry:
        address: 192.168.179.44:5000
        imagePullSecret: ""
    image:
      name: hyperdata8.3_tb
      tag: 20210811_v1
    resources:
      cpu: 2
      memory: 4Gi
      storage: 40Gi
    shmSize: 2Gi
  
  
